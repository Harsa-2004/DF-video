{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "19RNJ8k9uzG0cNcm5pCjZxRtrmQoy_UM-",
      "authorship_tag": "ABX9TyMSMpvgkwB3OCnEcdKL20zV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Harsa-2004/DF-video/blob/main/DF\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SPiZncAEH9oS",
        "outputId": "56f54a01-83fd-441c-cfa6-de3ea928eccc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "from keras import layers, models\n",
        "import os\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "2Y3RSfAMTAvI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_dir='/content/drive/My Drive/FF++'"
      ],
      "metadata": {
        "id": "JGxMvvFi_nwc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import cv2\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv3D, MaxPooling3D, Flatten, Dense, Dropout, BatchNormalization\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tqdm import tqdm\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "\n",
        "# Ensure reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n"
      ],
      "metadata": {
        "id": "_pMsE_ga_hFc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "\n",
        "def load_videos_from_directory(directory, label, frame_count=30):\n",
        "    videos = []\n",
        "    labels = []\n",
        "    for filename in os.listdir(directory):\n",
        "        if filename.endswith('.mp4'):\n",
        "            video_path = os.path.join(directory, filename)\n",
        "            cap = cv2.VideoCapture(video_path)\n",
        "            frames = []\n",
        "            while cap.isOpened() and len(frames) < frame_count:\n",
        "                ret, frame = cap.read()\n",
        "                if not ret:\n",
        "                    break\n",
        "                frame = cv2.resize(frame, (128, 128))\n",
        "                frames.append(img_to_array(frame))\n",
        "            cap.release()\n",
        "            if len(frames) == frame_count:\n",
        "                videos.append(np.array(frames))\n",
        "                labels.append(label)\n",
        "    return np.array(videos), np.array(labels)\n",
        "\n",
        "# Paths to your dataset directories\n",
        "train_real_dir = '/content/drive/My Drive/video train and validation dataset/real/train'\n",
        "validation_real_dir = '/content/drive/My Drive/video train and validation dataset/real/validation'\n",
        "train_fake_dir = '/content/drive/My Drive/video train and validation dataset/fake/train'\n",
        "validation_fake_dir = '/content/drive/My Drive/video train and validation dataset/fake/validation'\n",
        "\n",
        "# Load and prepare datasets\n",
        "train_real_videos, train_real_labels = load_videos_from_directory(train_real_dir, 0)\n",
        "validation_real_videos, validation_real_labels = load_videos_from_directory(validation_real_dir, 0)\n",
        "train_fake_videos, train_fake_labels = load_videos_from_directory(train_fake_dir, 1)\n",
        "validation_fake_videos, validation_fake_labels = load_videos_from_directory(validation_fake_dir, 1)\n",
        "\n",
        "# Combine and split the data\n",
        "X_train = np.concatenate((train_real_videos, train_fake_videos), axis=0)\n",
        "y_train = np.concatenate((train_real_labels, train_fake_labels), axis=0)\n",
        "X_validation = np.concatenate((validation_real_videos, validation_fake_videos), axis=0)\n",
        "y_validation = np.concatenate((validation_real_labels, validation_fake_labels), axis=0)\n",
        "\n",
        "# Verify the shapes of the data arrays\n",
        "print(\"Shapes of the data arrays:\")\n",
        "print(\"X_train:\", X_train.shape)  # Should be (num_samples, 30, 128, 128, 3)\n",
        "print(\"y_train:\", y_train.shape)  # Should be (num_samples,)\n",
        "print(\"X_validation:\", X_validation.shape)  # Should be (num_samples, 30, 128, 128, 3)\n",
        "print(\"y_validation:\", y_validation.shape)  # Should be (num_samples,)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "zzQpf4yo_0kq",
        "outputId": "e3bc50eb-7067-4439-cea0-969cf62ed642"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-eb943ad51c65>\u001b[0m in \u001b[0;36m<cell line: 33>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;31m# Load and prepare datasets\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m \u001b[0mtrain_real_videos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_real_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_videos_from_directory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_real_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0mvalidation_real_videos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_real_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_videos_from_directory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalidation_real_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0mtrain_fake_videos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_fake_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_videos_from_directory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_fake_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-5-eb943ad51c65>\u001b[0m in \u001b[0;36mload_videos_from_directory\u001b[0;34m(directory, label, frame_count)\u001b[0m\n\u001b[1;32m     13\u001b[0m             \u001b[0mframes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0mcap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misOpened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframes\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mframe_count\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                 \u001b[0mret\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mret\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                     \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv3D, MaxPooling3D, Flatten, Dense, Dropout, BatchNormalization\n",
        "\n",
        "# Define the 3D CNN model\n",
        "model = Sequential([\n",
        "    Conv3D(32, (3, 3, 3), activation='relu', input_shape=(30, 128, 128, 3)),\n",
        "    MaxPooling3D((2, 2, 2)),\n",
        "    BatchNormalization(),\n",
        "\n",
        "    Conv3D(64, (3, 3, 3), activation='relu'),\n",
        "    MaxPooling3D((2, 2, 2)),\n",
        "    BatchNormalization(),\n",
        "\n",
        "    Conv3D(128, (3, 3, 3), activation='relu'),\n",
        "    MaxPooling3D((2, 2, 2)),\n",
        "    BatchNormalization(),\n",
        "\n",
        "    Flatten(),\n",
        "    Dense(512, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(\n",
        "    X_train, y_train,\n",
        "    epochs=15,\n",
        "    batch_size=8,\n",
        "    validation_data=(X_validation, y_validation),\n",
        "    callbacks=[\n",
        "        tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True),\n",
        "        tf.keras.callbacks.ModelCheckpoint('best_3dcnn_model.keras', save_best_only=True, monitor='val_loss')\n",
        "    ]\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0RzSsQuDCYE8",
        "outputId": "c6106cf1-0fae-4845-9571-7740a35ac255"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m938s\u001b[0m 23s/step - accuracy: 0.5355 - loss: 16.3231 - val_accuracy: 0.5000 - val_loss: 216.4580\n",
            "Epoch 2/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m916s\u001b[0m 23s/step - accuracy: 0.5868 - loss: 17.1877 - val_accuracy: 0.5125 - val_loss: 47.9358\n",
            "Epoch 3/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m904s\u001b[0m 22s/step - accuracy: 0.6250 - loss: 11.6216 - val_accuracy: 0.5375 - val_loss: 73.8611\n",
            "Epoch 4/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m926s\u001b[0m 23s/step - accuracy: 0.6614 - loss: 7.4943 - val_accuracy: 0.5875 - val_loss: 9.9659\n",
            "Epoch 5/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m914s\u001b[0m 22s/step - accuracy: 0.6776 - loss: 4.6341 - val_accuracy: 0.5750 - val_loss: 4.8074\n",
            "Epoch 6/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m932s\u001b[0m 23s/step - accuracy: 0.6874 - loss: 5.9632 - val_accuracy: 0.5750 - val_loss: 3.1798\n",
            "Epoch 7/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m905s\u001b[0m 22s/step - accuracy: 0.7143 - loss: 4.1168 - val_accuracy: 0.6250 - val_loss: 3.9055\n",
            "Epoch 8/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m952s\u001b[0m 23s/step - accuracy: 0.7588 - loss: 1.9850 - val_accuracy: 0.6125 - val_loss: 3.6063\n",
            "Epoch 9/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m923s\u001b[0m 23s/step - accuracy: 0.7529 - loss: 3.5065 - val_accuracy: 0.5750 - val_loss: 3.1659\n",
            "Epoch 10/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m928s\u001b[0m 23s/step - accuracy: 0.8115 - loss: 1.4441 - val_accuracy: 0.5875 - val_loss: 3.0640\n",
            "Epoch 11/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1011s\u001b[0m 24s/step - accuracy: 0.8192 - loss: 1.0245 - val_accuracy: 0.5375 - val_loss: 2.6705\n",
            "Epoch 12/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m928s\u001b[0m 23s/step - accuracy: 0.7762 - loss: 3.0143 - val_accuracy: 0.6000 - val_loss: 5.8189\n",
            "Epoch 13/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m924s\u001b[0m 23s/step - accuracy: 0.8010 - loss: 2.2019 - val_accuracy: 0.6375 - val_loss: 4.6566\n",
            "Epoch 14/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m923s\u001b[0m 23s/step - accuracy: 0.7719 - loss: 2.0953 - val_accuracy: 0.5750 - val_loss: 4.5787\n",
            "Epoch 15/15\n",
            "\u001b[1m40/40\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m939s\u001b[0m 24s/step - accuracy: 0.8385 - loss: 1.3200 - val_accuracy: 0.6375 - val_loss: 3.1695\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('/content/drive/My Drive/best_3dcnn_model.h5')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eZxfIS0C4O6A",
        "outputId": "f8f5635a-2f2e-4492-eac4-21a27aa9d272"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download('/content/drive/My Drive/best_3dcnn_model.h5')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "YvWfrEhK4rmW",
        "outputId": "6603c90f-b9f1-4e84-c539-fb991905f65b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_944f3052-30d4-428e-a761-f637e0dc0762\", \"best_3dcnn_model.h5\", 311725888)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "\n",
        "# Load the trained model\n",
        "model = load_model('/content/drive/My Drive/best_3dcnn_model.h5')\n",
        "\n",
        "def preprocess_video(video_path, frame_count=30):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while cap.isOpened() and len(frames) < frame_count:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frame = cv2.resize(frame, (128, 128))\n",
        "        frames.append(img_to_array(frame))\n",
        "    cap.release()\n",
        "    if len(frames) == frame_count:\n",
        "        return np.array(frames)\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "def predict_video(video_path):\n",
        "    video = preprocess_video(video_path)\n",
        "    if video is not None:\n",
        "        video = np.expand_dims(video, axis=0)  # Add batch dimension\n",
        "        prediction = model.predict(video)\n",
        "        return 'Fake' if prediction[0] >= 0.5 else 'Real'\n",
        "    else:\n",
        "        return 'Video does not have enough frames'\n",
        "\n",
        "# Test video path\n",
        "test_video_path = '/content/drive/My Drive/video train and validation dataset/fake/validation/02_15__talking_angry_couch__HTG660F8.mp4'\n",
        "\n",
        "# Predict if the video is real or fake\n",
        "result = predict_video(test_video_path)\n",
        "print(f'The video is: {result}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gIZ0dCyI5b9Y",
        "outputId": "d0cd4eed-067c-434b-e254-fedda7d09b1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 944ms/step\n",
            "The video is: Real\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "from tensorflow.keras.models import load_model\n",
        "\n",
        "# Load the trained model\n",
        "model = load_model('/content/drive/My Drive/best_3dcnn_model.h5')\n",
        "\n",
        "def preprocess_video(video_path, frame_count=30):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while cap.isOpened() and len(frames) < frame_count:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frame = cv2.resize(frame, (128, 128))\n",
        "        frames.append(img_to_array(frame))\n",
        "    cap.release()\n",
        "\n",
        "    # If video has fewer than frame_count frames, pad with last frame\n",
        "    while len(frames) < frame_count:\n",
        "        frames.append(frames[-1])\n",
        "\n",
        "    return np.array([frames])  # Model expects a batch dimension\n",
        "\n",
        "def classify_video(video_path):\n",
        "    processed_video = preprocess_video(video_path)\n",
        "\n",
        "    if processed_video is None:\n",
        "        print(\"The video could not be processed correctly.\")\n",
        "        return\n",
        "\n",
        "    prediction = model.predict(processed_video)\n",
        "    probability = prediction[0][0]\n",
        "\n",
        "    # Classify based on the prediction probability\n",
        "    if probability > 0.5:\n",
        "        classification = \"Fake\"\n",
        "        confidence = probability\n",
        "    else:\n",
        "        classification = \"Real\"\n",
        "        confidence = 1 - probability\n",
        "\n",
        "    return classification, confidence\n",
        "\n",
        "# Example usage\n",
        "video_path = '/content/drive/My Drive/smiling beautiful young woman having video call via smartphone_preview.mp4'\n",
        "classification, confidence = classify_video(video_path)\n",
        "\n",
        "if classification:\n",
        "    print(f\"The video is classified as {classification} with a confidence of {confidence:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wFZqH1U-0nz2",
        "outputId": "51919003-785c-4e8b-8056-2a5049db0b21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n",
            "The video is classified as Fake with a confidence of 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "\n",
        "# Load the trained model\n",
        "model = load_model('/content/drive/My Drive/best_3dcnn_model.h5')\n",
        "\n",
        "def preprocess_video(video_path, frame_count=30):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while cap.isOpened() and len(frames) < frame_count:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frame = cv2.resize(frame, (128, 128))\n",
        "        frames.append(img_to_array(frame))\n",
        "    cap.release()\n",
        "\n",
        "    # If video has fewer than frame_count frames, pad with last frame\n",
        "    while len(frames) < frame_count:\n",
        "        frames.append(frames[-1])\n",
        "\n",
        "    return np.array([frames])  # Model expects a batch dimension\n",
        "\n",
        "def classify_video(video_path):\n",
        "    processed_video = preprocess_video(video_path)\n",
        "\n",
        "    if processed_video is None:\n",
        "        print(\"The video could not be processed correctly.\")\n",
        "        return\n",
        "\n",
        "    prediction = model.predict(processed_video)\n",
        "    probability = prediction[0][0]\n",
        "\n",
        "    # Classify based on the prediction probability\n",
        "    if probability > 0.5:\n",
        "        classification = \"Fake\"\n",
        "        confidence = probability\n",
        "    else:\n",
        "        classification = \"Real\"\n",
        "        confidence = 1 - probability\n",
        "\n",
        "    return classification, confidence\n",
        "\n",
        "# Example usage\n",
        "video_path = '/content/drive/My Drive/1476396_People_Lifestyle_1280x720.mp4'\n",
        "classification, confidence = classify_video(video_path)\n",
        "\n",
        "if classification:\n",
        "    print(f\"The video is classified as {classification} with a confidence of {confidence:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9d5f34db-cb8d-413c-acb2-8431d3e72838",
        "id": "tio40OVPHRG4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 797ms/step\n",
            "The video is classified as Fake with a confidence of 0.53\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1e6i016kFE5R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "\n",
        "# Load the trained model\n",
        "model = load_model('/content/drive/My Drive/best_3dcnn_model.h5')\n",
        "\n",
        "def preprocess_video(video_path, frame_count=30):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while cap.isOpened() and len(frames) < frame_count:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frame = cv2.resize(frame, (128, 128))\n",
        "        frames.append(img_to_array(frame))\n",
        "    cap.release()\n",
        "\n",
        "    # If video has fewer than frame_count frames, pad with last frame\n",
        "    while len(frames) < frame_count:\n",
        "        frames.append(frames[-1])\n",
        "\n",
        "    return np.array([frames])  # Model expects a batch dimension\n",
        "\n",
        "def classify_video(video_path):\n",
        "    processed_video = preprocess_video(video_path)\n",
        "\n",
        "    if processed_video is None:\n",
        "        print(\"The video could not be processed correctly.\")\n",
        "        return\n",
        "\n",
        "    prediction = model.predict(processed_video)\n",
        "    probability = prediction[0][0]\n",
        "\n",
        "    # Classify based on the prediction probability\n",
        "    if probability > 0.5:\n",
        "        classification = \"Fake\"\n",
        "        confidence = probability\n",
        "    else:\n",
        "        classification = \"Real\"\n",
        "        confidence = 1 - probability\n",
        "\n",
        "    return classification, confidence\n",
        "\n",
        "# Example usage\n",
        "video_path = '/content/drive/My Drive/dancing-kangaroo.mp4'\n",
        "classification, confidence = classify_video(video_path)\n",
        "\n",
        "if classification:\n",
        "    print(f\"The video is classified as {classification} with a confidence of {confidence:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "98fed17c-569f-49aa-ffd1-52da84436b25",
        "id": "l2uCTmd4OCA9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n",
            "The video is classified as Fake with a confidence of 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "\n",
        "# Load the trained model\n",
        "model = load_model('/content/drive/My Drive/best_3dcnn_model.h5')\n",
        "\n",
        "def preprocess_video(video_path, frame_count=30):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while cap.isOpened() and len(frames) < frame_count:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frame = cv2.resize(frame, (128, 128))\n",
        "        frames.append(img_to_array(frame))\n",
        "    cap.release()\n",
        "\n",
        "    # If video has fewer than frame_count frames, pad with last frame\n",
        "    while len(frames) < frame_count:\n",
        "        frames.append(frames[-1])\n",
        "\n",
        "    return np.array([frames])  # Model expects a batch dimension\n",
        "\n",
        "def classify_video(video_path):\n",
        "    processed_video = preprocess_video(video_path)\n",
        "\n",
        "    if processed_video is None:\n",
        "        print(\"The video could not be processed correctly.\")\n",
        "        return\n",
        "\n",
        "    prediction = model.predict(processed_video)\n",
        "    probability = prediction[0][0]\n",
        "\n",
        "    # Classify based on the prediction probability\n",
        "    if probability > 0.5:\n",
        "        classification = \"Fake\"\n",
        "        confidence = probability\n",
        "    else:\n",
        "        classification = \"Real\"\n",
        "        confidence = 1 - probability\n",
        "\n",
        "    return classification, confidence\n",
        "\n",
        "# Example usage\n",
        "video_path = '/content/drive/My Drive/istockphoto-1471287393-640_adpp_is.mp4'\n",
        "classification, confidence = classify_video(video_path)\n",
        "\n",
        "if classification:\n",
        "    print(f\"The video is classified as {classification} with a confidence of {confidence:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82f8d982-15a1-4a3a-cae3-6d1d87bf436a",
        "id": "Eoi19frSLHjh"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n",
            "The video is classified as Real with a confidence of 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "\n",
        "# Load the trained model\n",
        "model = load_model('/content/drive/My Drive/best_3dcnn_model.h5')\n",
        "\n",
        "def preprocess_video(video_path, frame_count=30):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while cap.isOpened() and len(frames) < frame_count:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frame = cv2.resize(frame, (128, 128))\n",
        "        frames.append(img_to_array(frame))\n",
        "    cap.release()\n",
        "\n",
        "    # If video has fewer than frame_count frames, pad with last frame\n",
        "    while len(frames) < frame_count:\n",
        "        frames.append(frames[-1])\n",
        "\n",
        "    return np.array([frames])  # Model expects a batch dimension\n",
        "\n",
        "def classify_video(video_path):\n",
        "    processed_video = preprocess_video(video_path)\n",
        "\n",
        "    if processed_video is None:\n",
        "        print(\"The video could not be processed correctly.\")\n",
        "        return\n",
        "\n",
        "    prediction = model.predict(processed_video)\n",
        "    probability = prediction[0][0]\n",
        "\n",
        "    # Classify based on the prediction probability\n",
        "    if probability > 0.5:\n",
        "        classification = \"Fake\"\n",
        "        confidence = probability\n",
        "    else:\n",
        "        classification = \"Real\"\n",
        "        confidence = 1 - probability\n",
        "\n",
        "    return classification, confidence\n",
        "\n",
        "# Example usage\n",
        "video_path = '/content/drive/My Drive/istockphoto-1189553843-640_adpp_is.mp4'\n",
        "classification, confidence = classify_video(video_path)\n",
        "\n",
        "if classification:\n",
        "    print(f\"The video is classified as {classification} with a confidence of {confidence:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "760641c2-9917-449a-945e-2f6fd52efca7",
        "id": "J9EW0b9dPj9l"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 690ms/step\n",
            "The video is classified as Real with a confidence of 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "from tensorflow.keras.models import load_model\n",
        "\n",
        "# Load the trained model\n",
        "model = load_model('/content/drive/My Drive/best_3dcnn_model.h5')\n",
        "\n",
        "def preprocess_video(video_path, frame_count=30):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while cap.isOpened() and len(frames) < frame_count:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frame = cv2.resize(frame, (128, 128))\n",
        "        frames.append(img_to_array(frame))\n",
        "    cap.release()\n",
        "\n",
        "    # If video has fewer than frame_count frames, pad with last frame\n",
        "    while len(frames) < frame_count:\n",
        "        frames.append(frames[-1])\n",
        "\n",
        "    return np.array([frames])  # Model expects a batch dimension\n",
        "\n",
        "def classify_video(video_path):\n",
        "    processed_video = preprocess_video(video_path)\n",
        "\n",
        "    if processed_video is None:\n",
        "        print(\"The video could not be processed correctly.\")\n",
        "        return\n",
        "\n",
        "    prediction = model.predict(processed_video)\n",
        "    probability = prediction[0][0]\n",
        "\n",
        "    # Classify based on the prediction probability\n",
        "    if probability > 0.5:\n",
        "        classification = \"Fake\"\n",
        "        confidence = probability\n",
        "    else:\n",
        "        classification = \"Real\"\n",
        "        confidence = 1 - probability\n",
        "\n",
        "    return classification, confidence\n",
        "\n",
        "# Example usage\n",
        "video_path = '/content/drive/My Drive/IV2.mp4'\n",
        "classification, confidence = classify_video(video_path)\n",
        "\n",
        "if classification:\n",
        "    print(f\"The video is classified as {classification} with a confidence of {confidence:.2f}\")\n"
      ],
      "metadata": {
        "id": "mPfaIk9_TMWB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e3dfb87d-e5dd-49c1-b998-32780f108c5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 645ms/step\n",
            "The video is classified as Real with a confidence of 0.69\n"
          ]
        }
      ]
    }
  ]
}